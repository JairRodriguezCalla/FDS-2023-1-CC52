# -*- coding: utf-8 -*-
"""Data Science

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IP_ogO3wwqzx5vEEm47zeIVa9xa229jr
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Carga los datos en un DataFrame de pandas
data = pd.read_csv("datos.csv")

# Verifica los primeros registros de los datos
print(data.head())

data.info()

data.columns

sns.pairplot(data)

#Analisis exploratorio
sns.heatmap(data.corr(),cmap="YlGnBu", annot=True)

X = data[['ID', 'Marital.Status', 'Gender', 'Income', 'Children', 'Education',
       'Occupation', 'Home.Owner', 'Cars', 'Commute.Distance', 'Region', 'Age',
       'Purchased.Bike']]

y = data[['Purchased.Bike']]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

# Verifica las dimensiones de los conjuntos de entrenamiento y prueba
print("Dimensiones del conjunto de entrenamiento:", X_train.shape)
print("Dimensiones del conjunto de prueba:", X_test.shape)

from sklearn.linear_model import LogisticRegression

# Aplicar One-Hot Encoding a las variables categóricas
X_train_encoded = pd.get_dummies(X_train)

# Convertir y_train en un vector unidimensional
y_train = y_train.ravel()

# Crear una instancia del modelo LogisticRegression
logreg = LogisticRegression()

# Entrenar el modelo con los datos de entrenamiento codificados
logreg.fit(X_train_encoded, y_train)

# Aplicar One-Hot Encoding a los datos de prueba
X_test_encoded = pd.get_dummies(X_test)

# Realizar predicciones en los datos de prueba
y_pred = logreg.predict(X_test_encoded)

# Calcular la exactitud del modelo
accuracy = accuracy_score(y_test, y_pred)
print("Exactitud del modelo:", accuracy)

from sklearn.metrics import confusion_matrix

# Calcular la matriz de confusión
confusion_matrix = confusion_matrix(y_test, y_pred)
print("Matriz de confusión:")
print(confusion_matrix)

from sklearn.metrics import classification_report

# Calcular el reporte de clasificación
classification_report = classification_report(y_test, y_pred)
print("Reporte de clasificación:")
print(classification_report)

